<?xml version="1.0" encoding="UTF-8"?>
<!--
 This is a WordPress eXtended RSS file generated by WordPress as an export of your site.
 It contains information about your site's posts, pages, comments, categories, and other content.
 You may use this file to transfer that content from one site to another.
 This file is not intended to serve as a complete backup of your site.

 To import this information into a WordPress site follow these steps:
 1. Log in to that site as an administrator.
 2. Go to Tools: Import in the WordPress admin panel.
 3. Install the "WordPress" importer from the list.
 4. Activate & Run Importer.
 5. Upload this file using the form provided on that page.
 6. You will first be asked to map the authors in this export file to users
    on the site. For each author, you may choose to map to an
    existing user on the site or to create a new user.
 7. WordPress will then import each of the posts, pages, comments, categories, etc.
    contained in this file into your site.
-->
<!-- generator="WordPress.com" created="2016-11-12 01:30"-->
<rss version="2.0" xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:wp="http://wordpress.org/export/1.2/">
  <channel>
<title>micdemarco</title>
<link>https://micdemarco.wordpress.com</link>
<description/>
<pubDate>Sat, 12 Nov 2016 01:30:14 +0000</pubDate>
<language>en</language>
<wp:wxr_version>1.2</wp:wxr_version>
<wp:base_site_url>http://wordpress.com/</wp:base_site_url>
<wp:base_blog_url>https://micdemarco.wordpress.com</wp:base_blog_url>
<wp:author>
  <wp:author_login>micdemarco</wp:author_login>
  <wp:author_email>miczdem@gmail.com</wp:author_email>
  <wp:author_display_name><![CDATA[micdemarco]]></wp:author_display_name>
  <wp:author_first_name><![CDATA[]]></wp:author_first_name>
  <wp:author_last_name><![CDATA[]]></wp:author_last_name>
</wp:author>
<wp:category>
  <wp:term_id>1</wp:term_id>
  <wp:category_nicename>uncategorized</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Uncategorized]]></wp:cat_name>
</wp:category>
<wp:tag>
  <wp:term_id>463744</wp:term_id>
  <wp:tag_slug>angular</wp:tag_slug>
  <wp:tag_name><![CDATA[angular]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>335778</wp:term_id>
  <wp:tag_slug>azure</wp:tag_slug>
  <wp:tag_name><![CDATA[azure]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>121169617</wp:term_id>
  <wp:tag_slug>azure-ad</wp:tag_slug>
  <wp:tag_name><![CDATA[azure ad]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>81819</wp:term_id>
  <wp:tag_slug>facebook</wp:tag_slug>
  <wp:tag_name><![CDATA[Facebook]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>212403219</wp:term_id>
  <wp:tag_slug>firebootcamp</wp:tag_slug>
  <wp:tag_name><![CDATA[firebootcamp]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>1303348</wp:term_id>
  <wp:tag_slug>google-photos</wp:tag_slug>
  <wp:tag_name><![CDATA[Google Photos]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>65333</wp:term_id>
  <wp:tag_slug>gulp</wp:tag_slug>
  <wp:tag_name><![CDATA[Gulp]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>256082</wp:term_id>
  <wp:tag_slug>hub</wp:tag_slug>
  <wp:tag_name><![CDATA[hub]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>8846</wp:term_id>
  <wp:tag_slug>model</wp:tag_slug>
  <wp:tag_name><![CDATA[model]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>36699</wp:term_id>
  <wp:tag_slug>mvc</wp:tag_slug>
  <wp:tag_name><![CDATA[MVC]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>35529257</wp:term_id>
  <wp:tag_slug>oauth2</wp:tag_slug>
  <wp:tag_name><![CDATA[OAuth2]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>144183</wp:term_id>
  <wp:tag_slug>picasa</wp:tag_slug>
  <wp:tag_name><![CDATA[Picasa]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>68523697</wp:term_id>
  <wp:tag_slug>signalr</wp:tag_slug>
  <wp:tag_name><![CDATA[signalr]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>342877</wp:term_id>
  <wp:tag_slug>tfs</wp:tag_slug>
  <wp:tag_name><![CDATA[TFS]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>427095</wp:term_id>
  <wp:tag_slug>web-api</wp:tag_slug>
  <wp:tag_name><![CDATA[web api]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>800</wp:term_id>
  <wp:tag_slug>windows</wp:tag_slug>
  <wp:tag_name><![CDATA[Windows]]></wp:tag_name>
</wp:tag>
<wp:term>
  <wp:term_id>212405511</wp:term_id>
  <wp:term_taxonomy>nav_menu</wp:term_taxonomy>
  <wp:term_slug>menu</wp:term_slug>
  <wp:term_name><![CDATA[Menu]]></wp:term_name>
</wp:term>
<generator>http://wordpress.com/</generator>
<image>
		<url>https://s2.wp.com/i/buttonw-com.png</url>
		<title>micdemarco</title>
		<link>https://micdemarco.wordpress.com</link>
	</image>
	<item>
  <title>About</title>
  <link>https://micdemarco.wordpress.com/about/</link>
  <pubDate>Sun, 03 Aug 2014 17:43:26 +0000</pubDate>
  <dc:creator>micdemarco</dc:creator>
  <guid isPermaLink="false">http://micdemarco.wordpress.com/?page_id=1</guid>
  <description/>
  <content:encoded><![CDATA[This is an example of a page. Unlike posts, which are displayed on your blog’s front page in the order they’re published, pages are better suited for more timeless content that you want to be easily accessible, like your About or Contact information. Click the Edit link to make changes to this page or <a title="Direct link to Add New in the Admin Dashboard" href="/wp-admin/post-new.php?post_type=page">add another page</a>.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1</wp:post_id>
  <wp:post_date>2014-08-03 17:43:26</wp:post_date>
  <wp:post_date_gmt>2014-08-03 17:43:26</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>about</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:postmeta>
    <wp:meta_key>_wp_page_template</wp:meta_key>
    <wp:meta_value><![CDATA[default]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>2014-05-12 11.27.42</title>
  <link>https://micdemarco.wordpress.com/2014-05-12-11-27-42/</link>
  <pubDate>Sun, 03 Aug 2014 17:57:30 +0000</pubDate>
  <dc:creator>micdemarco</dc:creator>
  <guid isPermaLink="false">http://micdemarco.files.wordpress.com/2014/08/2014-05-12-11-27-42.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2</wp:post_id>
  <wp:post_date>2014-08-03 17:57:30</wp:post_date>
  <wp:post_date_gmt>2014-08-03 17:57:30</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>2014-05-12-11-27-42</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://micdemarco.files.wordpress.com/2014/08/2014-05-12-11-27-42.jpg</wp:attachment_url>
</item>
<item>
  <title>Unit Testing With Entity Framework</title>
  <link>https://micdemarco.wordpress.com/2014/11/05/unit-testing-with-entity-framework/</link>
  <pubDate>Wed, 05 Nov 2014 14:07:35 +0000</pubDate>
  <dc:creator>micdemarco</dc:creator>
  <guid isPermaLink="false">http://micdemarco.wordpress.com/?p=3</guid>
  <description/>
  <content:encoded><![CDATA[While working on a project involving Integration between Web Services and an MsSQL Database accessed through Entity Framework, I decided to use a Test Driven Approach.

At first I used a direct reference to my data model and wrote integration tests, however this required that all my tests depend upon having a database up and running to connect to.

I wanted to have my tests written to be independent of the Database.  In order to do this I followed the following steps adapted from an <a href="http://www.asp.net/web-api/overview/testing-and-debugging/mocking-entity-framework-when-unit-testing-aspnet-web-api-2">excellent post by Tom FitzMacken</a>:
<h3>1) Create an interface from your DataContext - IAppDataModel</h3>
Create an interface IAppDataModel and extract all DbSet members and SaveChanges:

https://gist.github.com/miczdem/7cf17ed7ae9b77aac852
<strong>Listing 1: Interface from your DbContext</strong>

<strong>Tip</strong>: To remove coupling, place the interface in a separate project named Solution.RepositoryInterfaces
<h3>2) Change your DbContext to implement the interface IAppDataModel</h3>
https://gist.github.com/miczdem/28f9b6b76ef69289027b
<strong>Listing 2: Implement the interface on your DbContext</strong>
<h3>3) Change your Business Classes to use the interface IAppDataModel</h3>
https://gist.github.com/miczdem/0606e3cb72252b80e2a1
<strong>Listing 3: Use an interface instead of a direct reference to your DbContext</strong>

By using an interface, you can choose what implementation you want to pass to the business class depending on your context.  For the test project, you will pass a Test DbContext.  At runtime you will an instance of your EF DbContext.
<h3>4) In your test project add a TestDbSet class</h3>
Add a class that inherits from DbSet and implements IQueryable and IEnumerable

https://gist.github.com/miczdem/628e1fdab11a3f2f55a6
<strong>Listing 4: TestDbSet Class</strong>
<h3>5) Create a Test DbContext that implements your IAppDataModel</h3>
https://gist.github.com/miczdem/bc18feac17ec3fed6c1d
<strong>Listing 5: Creating a Test DbContext with a Seed method</strong>
<h3>6) Use the Test DbContext in the tests</h3>
https://gist.github.com/miczdem/fe35731e1b550c52d84b
<strong>Listing 6: Using the TestDbContext</strong>
<h3>7) Optional - Create a DbSet that generates Identity</h3>
After implementing the Test DbContext, I realised that some of my tests were broken because they required an Identity Primary Key to be generated from the database.

In order to get around this I implemented a specially derived class with an overridden Create method for every Entity that required an Identity to be generated by the database:

https://gist.github.com/miczdem/f289176252e39af0939e
<strong>Listing 7: Inheriting from TestDbSet and overriding Create method</strong>
<h2>Conclusion</h2>
By defining an interface for your DbContext, it is possible to create an in memory Database Context that implements the same interface and can be used to simulate the physical Database.  This allows you to write Unit Tests that manipulate the Database Context without needing to connect to a physical Database.  While this is great for Unit Testing it must not be assumed that the simulated database will behave exactly as the physical database, and you will still need to perform Integration tests in order to know for certain that your code executes correctly.

For more information and a downloadable project check the <a href="http://www.asp.net/web-api/overview/testing-and-debugging/mocking-entity-framework-when-unit-testing-aspnet-web-api-2">post by Tom FitzMacken</a>.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>3</wp:post_id>
  <wp:post_date>2014-11-05 14:07:35</wp:post_date>
  <wp:post_date_gmt>2014-11-05 14:07:35</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>unit-testing-with-entity-framework</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[69155459]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_facebook</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_google_plus</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_linkedin</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_tumblr</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_path</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_8182541</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[miczdem]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://t.co/BCcc4CI3B1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_8182541</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:2612627647;b:1;}}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>SignalR with Angular JS - Fix for SignalR remains attached to a stale controller</title>
  <link>https://micdemarco.wordpress.com/2014/09/04/signalr-with-angular-js-fix-for-signalr-remains-attached-to-a-stale-controller/</link>
  <pubDate>Thu, 04 Sep 2014 14:03:09 +0000</pubDate>
  <dc:creator>micdemarco</dc:creator>
  <guid isPermaLink="false">http://micdemarco.wordpress.com/?p=5</guid>
  <description/>
  <content:encoded><![CDATA[While working with AngularJS and SignalR on a project at firebootcamp.com we ran into a situation where our SignalR hub was not updating our page when we navigated away and then navigated back to the page using angular routing.

The following video describes the problem:

https://www.youtube.com/watch?v=7khwTLkfv5Q

We had a SignalR hub defined and started within our controller:
<pre>vm.hub = $.connection.hub;
vm.scanHub = $.connection.scanHub;
vm.hub.start().done()
vm.scans = [];</pre>
We had our SignalR client function updating the vm.scans array inside our controller:
<pre>vm.scanHub.client.updateScan = function (data) {
    var i = 0;
    for (i = 0; i &lt; vm.scans.length; i++) {
        if (vm.scans[i].id == data.id) {
            vm.scans[i].status = data.status;
            vm.scans[i].status = data.status;
            vm.scans[i].goodLinks = data.goodLinks;
            vm.scans[i].badLinks = data.badLinks;
            vm.scans[i].totalLinks = data.totalLinks;
            return;
        }
    }
};</pre>
This function worked fine on the first load, but when we navigated away from the page, we realised that although the hub was still active and the function was being called, it was not updating our view.

While debugging we found that the hub was remaining attached to a stale controller that was out of scope.  SignalR was not restarting the hub for the new instance of the controller that was created when we navigated back to our page.

In order to fix this we found that if we stopped the hub whenever we changed route, then the hub started up again correctly when we navigated back to the initial page.

The following code fixed our issue:
<pre>app.run([
    '$rootScope', function ($rootScope, security) {
         
        $rootScope.$on('$routeChangeStart', function (event, currRoute, prevRoute) {
            $.connection.hub.stop();
        });
}]);</pre>
Conclusion:

If you are going to use SignalR within a controller, remember to stop the hub before starting it again in the controller scope.  The new controller will not start a new instance of the hub if the previous page controller still has an active hub attached to it.

Alternatively use a service to inject your SignalR hub as described in this excellent blog post:

http://sravi-kiran.blogspot.com.au/2013/09/ABetterWayOfUsingAspNetSignalRWithAngularJs.html

Thanks <a class="ProfileCard-screennameLink u-linkComplex js-nav" href="https://twitter.com/benjii22">@<span class="u-linkComplex-target">benjii22</span></a> <a class="ProfileHeaderCard-screennameLink u-linkComplex js-nav" href="https://twitter.com/igor_goldobin">@<span class="u-linkComplex-target">igor_goldobin</span></a> <a class="ProfileCard-screennameLink u-linkComplex js-nav" href="https://twitter.com/cameronchong">@<span class="u-linkComplex-target">cameronchong</span></a> for helping to find the solution.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>5</wp:post_id>
  <wp:post_date>2014-09-04 14:03:09</wp:post_date>
  <wp:post_date_gmt>2014-09-04 14:03:09</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>signalr-with-angular-js-fix-for-signalr-remains-attached-to-a-stale-controller</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="angular"><![CDATA[angular]]></category>
  <category domain="post_tag" nicename="firebootcamp"><![CDATA[firebootcamp]]></category>
  <category domain="post_tag" nicename="hub"><![CDATA[hub]]></category>
  <category domain="post_tag" nicename="model"><![CDATA[model]]></category>
  <category domain="post_tag" nicename="signalr"><![CDATA[signalr]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_facebook</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_google_plus</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_linkedin</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_tumblr</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_path</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[69155459]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_000c918744634609f3d6b39a04db6388</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_86de3c7fcfb91eb5fa6af927fd281556</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a41460d705553d18554b6e3f5b677a31</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_fea42c49d063a2d687c728b663a62f85</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[miczdem]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://t.co/eecf6Ue22W]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_8182541</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:2612627647;b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_8182541</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a3c3f24491b3a5b6f5b626f7086ed6a1</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_4ecf9048220edb31c574d4a8c65da9da</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>5</wp:comment_id>
    <wp:comment_author><![CDATA[qgaurav]]></wp:comment_author>
    <wp:comment_author_email>gauravbhavsar8@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://gravatar.com/qgaurav</wp:comment_author_url>
    <wp:comment_author_IP>206.183.111.25</wp:comment_author_IP>
    <wp:comment_date>2015-06-22 07:03:41</wp:comment_date>
    <wp:comment_date_gmt>2015-06-22 07:03:41</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hello,

I am using ui-router, so how can i fix this issue using $stateProvoder ?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value>11989106535</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1434961108.527185916900634765625;s:5:"event";s:9:"check-ham";s:4:"user";s:7:"qgaurav";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value>1435150327</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1435150327</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1435150327.400250911712646484375;s:5:"event";s:15:"status-approved";s:4:"user";s:7:"miczdem";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value>1434956621</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1434956621.60675907135009765625;s:5:"event";s:9:"check-ham";s:4:"user";s:7:"qgaurav";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>6</wp:comment_id>
    <wp:comment_author><![CDATA[miczdem]]></wp:comment_author>
    <wp:comment_author_email>miczdem@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://miczdem.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>121.44.56.220</wp:comment_author_IP>
    <wp:comment_date>2015-06-24 12:58:56</wp:comment_date>
    <wp:comment_date_gmt>2015-06-24 12:58:56</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hi,  I haven't used ui-router, however I had a look at the sample app.  I think this solution would be implemented in the same way inside 

https://github.com/angular-ui/ui-router/blob/master/sample/app/app.js

after 

$rootScope.$stateParams = $stateParams;

add

$rootScope.$on('$routeChangeStart', function (event, currRoute, prevRoute) {
            $.connection.hub.stop();
        });]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>5</wp:comment_parent>
    <wp:comment_user_id>69155459</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1435150736</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1435150736.7505919933319091796875;s:5:"event";s:9:"check-ham";s:4:"user";s:7:"miczdem";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value>11989274091</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value>1435150736</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Home</title>
  <link>https://micdemarco.wordpress.com/?p=14</link>
  <pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>micdemarco</dc:creator>
  <guid isPermaLink="false">http://micdemarco.wordpress.com/?p=14</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>14</wp:post_id>
  <wp:post_date>2014-09-05 02:26:12</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>1</wp:menu_order>
  <wp:post_type>nav_menu_item</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:postmeta>
    <wp:meta_key>_menu_item_type</wp:meta_key>
    <wp:meta_value><![CDATA[custom]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_object_id</wp:meta_key>
    <wp:meta_value><![CDATA[14]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_object</wp:meta_key>
    <wp:meta_value><![CDATA[custom]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_target</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_classes</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_xfn</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://miczdem.wordpress.com/]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_orphaned</wp:meta_key>
    <wp:meta_value><![CDATA[1409883972]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title/>
  <link>https://micdemarco.wordpress.com/?p=15</link>
  <pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>micdemarco</dc:creator>
  <guid isPermaLink="false">http://micdemarco.wordpress.com/?p=15</guid>
  <description/>
  <content:encoded><![CDATA[ ]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>15</wp:post_id>
  <wp:post_date>2014-09-05 02:26:12</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>1</wp:menu_order>
  <wp:post_type>nav_menu_item</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:postmeta>
    <wp:meta_key>_menu_item_type</wp:meta_key>
    <wp:meta_value><![CDATA[post_type]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_object_id</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_object</wp:meta_key>
    <wp:meta_value><![CDATA[page]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_target</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_classes</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_xfn</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_orphaned</wp:meta_key>
    <wp:meta_value><![CDATA[1409883972]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Home</title>
  <link>https://micdemarco.wordpress.com/?p=16</link>
  <pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>micdemarco</dc:creator>
  <guid isPermaLink="false">http://micdemarco.wordpress.com/?p=16</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>16</wp:post_id>
  <wp:post_date>2014-09-05 02:28:35</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>1</wp:menu_order>
  <wp:post_type>nav_menu_item</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:postmeta>
    <wp:meta_key>_menu_item_type</wp:meta_key>
    <wp:meta_value><![CDATA[custom]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_object_id</wp:meta_key>
    <wp:meta_value><![CDATA[16]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_object</wp:meta_key>
    <wp:meta_value><![CDATA[custom]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_target</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_classes</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_xfn</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://miczdem.wordpress.com/]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_orphaned</wp:meta_key>
    <wp:meta_value><![CDATA[1409884115]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title/>
  <link>https://micdemarco.wordpress.com/?p=17</link>
  <pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>micdemarco</dc:creator>
  <guid isPermaLink="false">http://micdemarco.wordpress.com/?p=17</guid>
  <description/>
  <content:encoded><![CDATA[ ]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>17</wp:post_id>
  <wp:post_date>2014-09-05 02:28:35</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>1</wp:menu_order>
  <wp:post_type>nav_menu_item</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:postmeta>
    <wp:meta_key>_menu_item_type</wp:meta_key>
    <wp:meta_value><![CDATA[post_type]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_object_id</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_object</wp:meta_key>
    <wp:meta_value><![CDATA[page]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_target</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_classes</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_xfn</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_orphaned</wp:meta_key>
    <wp:meta_value><![CDATA[1409884115]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>MVC + Angular + Less + Gulp + TFS + VSO</title>
  <link>https://micdemarco.wordpress.com/2015/06/25/mvc-angular-less-gulp-tfs-vso/</link>
  <pubDate>Thu, 25 Jun 2015 15:59:07 +0000</pubDate>
  <dc:creator>micdemarco</dc:creator>
  <guid isPermaLink="false">https://micdemarco.wordpress.com/?p=41</guid>
  <description/>
  <content:encoded><![CDATA[<a href="https://micdemarco.files.wordpress.com/2015/06/2015-06-26_02-04-09.png"><img class="aligncenter size-medium wp-image-62" src="https://micdemarco.files.wordpress.com/2015/06/2015-06-26_02-04-09.png?w=300" alt="asp.net-gulp" width="300" height="172" /></a>

The MVC <a href="http://www.asp.net/mvc/overview/performance/bundling-and-minification">Bundler </a>is a great tool provided by Microsoft and great for bundling and optimizing sources for delivery to the browser.  However as the front end content and libraries grow, it starts to lack the capabilities needed to effectively build the front end files both at run-time and also during development.

What if you wanted to build less files, minify and combine your scripts as you are developing them?  What if you wanted to call "bower install" as part of your build?

The in built MVC Bundler starts to feel limited when your front end build increases in complexity.

In this blog post I am going to describe the steps that I took in order to:
<ol>
	<li>use bower to install front end packages</li>
	<li>use gulp to watch and compile my less files every time I make a change</li>
	<li>use gulp-bundle-assets to compile source files every time I make a change</li>
	<li>build all front end scripts and styles into separate files for vendor and application</li>
	<li>use the MVC Bundler to serve the compiled files</li>
	<li>integrate the front end build with an on premises TFS Build connected to VSO TFS</li>
</ol>
Throughout the article I will reference the following:

Solution root: C:\Code\Demo\
MVC project root C:\Code\Demo\Demo.WebUI
<h1>1. Use bower to install front end packages</h1>
Firstly set up your environment.  (note these steps are for VS2013 and can be skipped if you are using 2015)
<ol>
	<li>Read <a href="http://www.hanselman.com/blog/IntroducingGulpGruntBowerAndNpmSupportForVisualStudio.aspx">http://www.hanselman.com/blog/IntroducingGulpGruntBowerAndNpmSupportForVisualStudio.aspx</a></li>
	<li>Install Git (required by bower) : <a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a> (add Git commands to the path)
<a href="https://micdemarco.files.wordpress.com/2015/06/untitled.png"><img class="alignnone size-medium wp-image-44" src="https://micdemarco.files.wordpress.com/2015/06/untitled.png?w=300" alt="Git" width="300" height="233" /></a></li>
	<li>Install Node : <a href="https://nodejs.org/download/">https://nodejs.org/download/</a></li>
	<li>Install Task Runner: <a href="https://visualstudiogallery.msdn.microsoft.com/8e1b4368-4afb-467a-bc13-9650572db708">https://visualstudiogallery.msdn.microsoft.com/8e1b4368-4afb-467a-bc13-9650572db708</a></li>
	<li>Optional install Alt+Space Command Line shortcut: <a href="https://visualstudiogallery.msdn.microsoft.com/4e84e2cf-2d6b-472a-b1e2-b84932511379">https://visualstudiogallery.msdn.microsoft.com/4e84e2cf-2d6b-472a-b1e2-b84932511379</a>
This is useful to quickly open a shell and run npm/gulp commands</li>
	<li>Open cmd and install global commands:
&gt;npm install -g gulp
&gt;npm install -g bower</li>
</ol>
Next we need to add front end packages to the project using bower.
<h3>Option 1 - Easy way</h3>
1. Add a file bower.json to the project root

https://gist.github.com/miczdem/8469cb120eb20e1313b4

2. Add a file packages.json to the project root

https://gist.github.com/miczdem/54d241a4a33050893f21

3. Open a command prompt and run
<p style="padding-left:30px;">C:\Code\Demo\Demo.WebUI&gt;npm install
C:\Code\Demo\Demo.WebUI&gt;bower install</p>

<h3><strong>Option 2 - Ninja way:</strong></h3>
<ol>
	<li>Open a command prompt in the MVC project directory</li>
	<li>Init npm
C:\Code\Demo\Demo.WebUI&gt;npm init
...</li>
	<li>Init bower
C:\Code\Demo\Demo.WebUI&gt;bower init
...</li>
	<li>Install packages using bower install --save
C:\Code\Demo\Demo.WebUI&gt;bower install angular --save
...</li>
	<li>Install npm packages using npm install --save
C:\Code\Demo\Demo.WebUI&gt;npm install gulp-less --save
...</li>
</ol>
<h3>After that...</h3>
The result of the above steps is a directory structure like the following:

<a href="https://micdemarco.files.wordpress.com/2015/06/2015-06-25_22-48-19.png"><img class="alignnone size-medium wp-image-46" src="https://micdemarco.files.wordpress.com/2015/06/2015-06-25_22-48-19.png?w=300" alt="bowercomponents" width="300" height="152" /></a>

Great, we are now managing all front end libraries with bower.  These can be referenced by your cshtml files as:

&lt;script src="/bower_components/angular/angular.js"&gt;&lt;/script&gt;
<h1>2. Use gulp to watch and compile my less files every time I make a change</h1>
One of the best uses of having a task runner is the ability to watch files and perform transformations with a few lines of code.

A major application is for the compilation of less files.  I would like to:
<ol>
	<li>Split my less files by category</li>
	<li>Use bootstrap variables inside my less</li>
	<li>Compile all my less files into a single css file</li>
</ol>
Approach

1. Create a master style.less that points to all application less files:

https://gist.github.com/miczdem/b18032252bc51943fc66

2. Create a gulp task to watch you less files, and compile the less:

https://gist.github.com/miczdem/3e083b51ecb83e4059b4

Note: Line 1 tells the Task Runner plugin to run the task.  This is slightly different in VS 2015
/// &lt;vs SolutionOpened='dev:watch' /&gt;

All that is needed is to reference the compiled css:

&lt;link href="/Content/Css/style.css" rel="stylesheet" /&gt;
<h1>3. Use gulp-bundle-assets to compile source files every time I make a change</h1>
I would also like to compile my JavaScript files whenever I make a change.  In order to do this, I need to extend my watch task to also watch my .js files.  I also need to use some new tools to perform the compilation

Approach:

1. Recommended reading
<ol>
	<li><a href="https://github.com/johnpapa/angular-styleguide">https://github.com/johnpapa/angular-styleguide</a></li>
	<li><a href="https://github.com/toddmotto/angularjs-styleguide">https://github.com/toddmotto/angularjs-styleguide</a></li>
	<li><a href="https://scotch.io/tutorials/angularjs-best-practices-directory-structure">https://scotch.io/tutorials/angularjs-best-practices-directory-structure</a></li>
</ol>
2. Implement a folder structure that allows you to
<ol>
	<li>Identify shared dependencies</li>
	<li>One object to one file</li>
	<li>Wrap in IIFEs</li>
	<li>Identify each file as a filter/service/directive/controller</li>
</ol>
3. Create a bundle file for use with: <a href="https://www.npmjs.com/package/gulp-bundle-assets">https://www.npmjs.com/package/gulp-bundle-assets</a>.

This file will go under
C:\Code\Demo\Demo.WebUI\Content\Bundles\bundle.main.copy.config

https://gist.github.com/miczdem/052f3e3c941a3caeb9a3

4. Create a new task in the gulpfile.js to build the scripts and extend the watch task:

https://gist.github.com/miczdem/8268d10fd10bb423bf9b

<strong>Note: the rev:false option will always generate the same output file.  </strong>

The watch task will ensure that every change to a *.js file under /Content/App will generate a new scripts bundle.  It can be referenced as:

&lt;script src="/Content/Bundles/Debug/assets/main-scripts.js"&gt;&lt;/script&gt;
<h1>4. Build all front end scripts and styles into separate files for vendor and application</h1>
I would now like to take my front end build a few steps farther.  I would like to
<ol>
	<li>build my vendor scripts and styles into single files</li>
	<li>add copy tasks for fonts, images and html templates</li>
	<li>add a task to clean the output directory before build</li>
	<li>optimise my watch tasks to only build and copy what is necessary</li>
	<li>call npm install and bower install as part of my build</li>
</ol>
1. Add a bundle config for main styles:

https://gist.github.com/miczdem/6785bc49ee9420aae0be

2. Add a bundle config for copying template files:

https://gist.github.com/miczdem/55c4709399dc948be15a

3. Add a bundle config for vendor files:

https://gist.github.com/miczdem/3d7dfac443ff882c3db2

4. Add a bundle config for copying fonts and images

https://gist.github.com/miczdem/a8e6e748cb01b1917588

5. Add gulp tasks for each of the separate bundle config files, and a main <strong>bundle</strong> task to run them all in sequence:

https://gist.github.com/miczdem/06661961beab095b9eca

<strong>Note 1: Also added an install task to run "npm install" and "bower install" from gulp</strong>
<strong> Note 2: Added task runner configuration /// &lt;vs BeforeBuild='bundle' SolutionOpened='dev:watch, install' /&gt;</strong>

In order to reference the correct files I will need the following references:

&lt;link href="~/Content/Bundles/Debug/assets/vendor-styles.css" rel="stylesheet" /&gt;
&lt;link href="~/Content/Bundles/Debug/assets/main-styles.css" rel="stylesheet" /&gt;

&lt;script src="/Content/Bundles/Debug/assets/vendor-scripts.js"&gt;&lt;/script&gt;
&lt;script src="/Content/Bundles/Debug/assets/main-scripts.js"&gt;&lt;/script&gt;
<h1>5. Use the MVC Bundler to serve the compiled front end files</h1>
The difficulty with integrating the gulp-bundle-assets file into MVC was how to generate unique files and reference them from the razor page.

gulp-bundle-assets can generate unique file names such as <strong>vendor-scripts-d2e93d010x.js </strong>by setting rev:true in the bundle config file.  Upon bundling, it will output the name of the created filenames to an output file called bundle.results*.js

However it is difficult to reference these files from an MVC Razor page.

The solution was to finally use the MVC bundler to pick up these files.

Approach:

1. Configure 2 bundles in BundleConfig.cs:

https://gist.github.com/miczdem/2d306d6917914087f600

<strong>Note: The BundleConfig can be configured to serve different bundles such as Release/Debug based on the environment.</strong>

2. Update the razor to reference the MVC bundles instead of static files
@Styles.Render("~/bundles/styles")
@Scripts.Render("~/bundles/scripts")

Now we can be sure that the files served to the client will always be up to date and will not be stored in the browser's cache.

<strong>Note: Through the use of source maps, you can also debug and edit the source files inside chrome by mapping the scripts to the source code directory within dev tools:</strong>

<a href="https://micdemarco.files.wordpress.com/2015/06/chrome.png"><img class="alignnone size-medium wp-image-57" src="https://micdemarco.files.wordpress.com/2015/06/chrome.png?w=300" alt="chrome" width="300" height="300" />
</a><strong>Figure: Adding mapped sources to file system from chrome dev tools</strong>
<h1>6. Integrate the front end build with an on premises TFS Build connected to VSO TFS</h1>
Ok, now that we have done all this work, it is time to check in some code .... (what!! you haven't checked in anything yet?!)

The question is, whether to check in compiled files or not.  Wouldn't it be great if the build server could bundle the front-end files in the same way as on the development machine?

I would like to
<ol>
	<li>Configure my on premises TFS to perform the gulp bundle task as part of the build process</li>
	<li>Include the bundled files as part of the deployment</li>
</ol>
Approach

1. Read the excellent post on how to do this: <a href="http://www.codecadwallader.com/2015/03/15/integrating-gulp-into-your-tfs-builds-and-web-deploy/">http://www.codecadwallader.com/2015/03/15/integrating-gulp-into-your-tfs-builds-and-web-deploy/</a>

2. On the build server perform the steps in <strong>"1. Use bower to install front end packages"</strong>

3. Ensure that the user that the build service is running under can execute
<p style="padding-left:30px;">&gt;bower
&gt;gulp
&gt;npm</p>
4. Add the following sections to your csproj at the end after all the imports sections:

https://gist.github.com/miczdem/c20700926f98e5a2f0c8

5. The only files that you need to check in are your gulpfile.js and /Content/Bundles/bundle.*.js
<ul>
	<li>Everything else under /Content/Bundles/ can be ignored</li>
	<li>Everything under /bower_components/ can be ignored</li>
	<li>Everything under /node_modules/ can be ignored</li>
</ul>
<h1>Conclusion:</h1>
With a bit of configuration, it is possible to integrate the packaging power of npm into visual studio, and enjoy the great flexibility that the gulp task runner provides.

There exist great tools such as gulp-bundle-assets that make the minification and bundling easy, however you could also perform these tasks using individual packages and have even more control on the build process.

MVC bundler is still a useful tool for the final step of delivery of the bundled files to the client.

With a few modifications, it is possible to integrate npm and gulp with MSBuild to fully automate the front end build process.

This allows you to keep your code base clean and not need to check in any compiled files into your source control.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>41</wp:post_id>
  <wp:post_date>2015-06-25 15:59:07</wp:post_date>
  <wp:post_date_gmt>2015-06-25 15:59:07</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>mvc-angular-less-gulp-tfs-vso</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="angular"><![CDATA[angular]]></category>
  <category domain="post_tag" nicename="gulp"><![CDATA[Gulp]]></category>
  <category domain="post_tag" nicename="mvc"><![CDATA[MVC]]></category>
  <category domain="post_tag" nicename="tfs"><![CDATA[TFS]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[69155459]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[12054335544]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:8182541;s:53:"https://twitter.com/miczdem/status/614100525781352448";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_8179149</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_8182541</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[miczdem]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a8ccded78cb0e301f98acace364e5002</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[62]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_post_restored_from</wp:meta_key>
    <wp:meta_value><![CDATA[a:3:{s:20:"restored_revision_id";i:61;s:16:"restored_by_user";i:69155459;s:13:"restored_time";i:1435248858;}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_8182541</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_664e5b782c4ede0dc1bd9538ffc02f32</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_2f30dbeed59c139e12f8079b3a7f3cc9</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_10623764066d77072e35c780a09a0805</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f422a025705c4e63fcc9aec137ea2273</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_395cb32a0b0116bc12a56135951fcaec</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_55aec282de32e0d83ac97072aca54e2f</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_2378c33664202d847ad02b413ca35408</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_7d41d7e3aeb180c96b866d0d1e61f5df</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_5ce2d017c5710306c6dfa22b57dbf6cc</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_13f6e3444f6ef5bf4a32a9234663c628</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_1e62dc1490ec1d5d574aba5637246fa1</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_9f3b740d72eccc06a0fbdce4179a52ab</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_4283bc895ba1d4e3c3239e05ecab235c</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_d200cc4d4f142ea361bfaa91940827c1</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_440a95f392479689fb915da7a740bdaf</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_840e69fc3fbf76995ac715a15d86127e</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_10e6d977100273d0aaa8ca13fccfe4dd</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_644b8eff1b3b9bb8cdc3ee9393068ca2</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_badfbb326dcefb554aa77561e3b23e7c</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Git</title>
  <link>https://micdemarco.wordpress.com/2015/06/25/mvc-angular-less-gulp-tfs-vso/untitled/#main</link>
  <pubDate>Thu, 25 Jun 2015 12:06:51 +0000</pubDate>
  <dc:creator>micdemarco</dc:creator>
  <guid isPermaLink="false">http://micdemarco.files.wordpress.com/2015/06/untitled.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>44</wp:post_id>
  <wp:post_date>2015-06-25 12:06:51</wp:post_date>
  <wp:post_date_gmt>2015-06-25 12:06:51</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>untitled</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>41</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://micdemarco.files.wordpress.com/2015/06/untitled.png</wp:attachment_url>
</item>
<item>
  <title>bowercomponents</title>
  <link>https://micdemarco.wordpress.com/2015/06/25/mvc-angular-less-gulp-tfs-vso/2015-06-25_22-48-19/#main</link>
  <pubDate>Thu, 25 Jun 2015 13:00:00 +0000</pubDate>
  <dc:creator>micdemarco</dc:creator>
  <guid isPermaLink="false">http://micdemarco.files.wordpress.com/2015/06/2015-06-25_22-48-19.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>46</wp:post_id>
  <wp:post_date>2015-06-25 13:00:00</wp:post_date>
  <wp:post_date_gmt>2015-06-25 13:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>2015-06-25_22-48-19</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>41</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://micdemarco.files.wordpress.com/2015/06/2015-06-25_22-48-19.png</wp:attachment_url>
</item>
<item>
  <title>chrome</title>
  <link>https://micdemarco.wordpress.com/2015/06/25/mvc-angular-less-gulp-tfs-vso/chrome/#main</link>
  <pubDate>Thu, 25 Jun 2015 15:14:24 +0000</pubDate>
  <dc:creator>micdemarco</dc:creator>
  <guid isPermaLink="false">http://micdemarco.files.wordpress.com/2015/06/chrome.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>57</wp:post_id>
  <wp:post_date>2015-06-25 15:14:24</wp:post_date>
  <wp:post_date_gmt>2015-06-25 15:14:24</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>chrome</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>41</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://micdemarco.files.wordpress.com/2015/06/chrome.png</wp:attachment_url>
</item>
<item>
  <title>asp.net-gulp</title>
  <link>https://micdemarco.wordpress.com/2015/06/25/mvc-angular-less-gulp-tfs-vso/2015-06-26_02-04-09/#main</link>
  <pubDate>Thu, 25 Jun 2015 16:08:38 +0000</pubDate>
  <dc:creator>micdemarco</dc:creator>
  <guid isPermaLink="false">http://micdemarco.files.wordpress.com/2015/06/2015-06-26_02-04-09.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>62</wp:post_id>
  <wp:post_date>2015-06-25 16:08:38</wp:post_date>
  <wp:post_date_gmt>2015-06-25 16:08:38</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>2015-06-26_02-04-09</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>41</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://micdemarco.files.wordpress.com/2015/06/2015-06-26_02-04-09.png</wp:attachment_url>
</item>
<item>
  <title>Azure AD Client vs User Credentials and Refresh Tokens</title>
  <link>https://micdemarco.wordpress.com/2016/02/12/azure-ad-user-credentials-and-refresh-tokens/</link>
  <pubDate>Fri, 12 Feb 2016 14:19:19 +0000</pubDate>
  <dc:creator>micdemarco</dc:creator>
  <guid isPermaLink="false">https://micdemarco.wordpress.com/?p=75</guid>
  <description/>
  <content:encoded><![CDATA[Refresh credentials are great because they can allow a client to access a resource over a period of time without having to re-authenticate.

In this blog post I am going to describe a particular scenario using Azure AD and Web Api.  I will not go into too much detail about setting up things on azure since the <a href="https://github.com/Azure-Samples">samples</a> do a great job if this.
<h2>Story</h2>
I have a specific scenario where:
<ol>
	<li>I would like to secure my Web API with Azure AD</li>
	<li>I would like my SPA Client to use OAuth2 access tokens in order to access the Web API</li>
	<li>I do not want an interactive login</li>
</ol>
I have 2 options:
<ol>
	<li>Include a secret key to my SPA in order for it to be able to generate tokens</li>
	<li>Supply my SPA Client with a refresh token during the initial page load, so that it could generate access tokens</li>
</ol>
I would prefer the second method mainly because
<ol>
	<li>I could generate as many refresh tokens as I want without supplying my secret.</li>
	<li>Refresh tokens will eventually expire as described <a href="http://www.cloudidentity.com/blog/2015/03/20/azure-ad-token-lifetime/">here</a></li>
</ol>
&nbsp;
<h2>First Method - Client Credentials - No Refresh Token</h2>
I first tried to generate a refresh token using the client credentials where you supply a client Id and a client Secret as described <a href="https://msdn.microsoft.com/en-us/library/azure/dn645543.aspx">here</a>.

However this method did not work for me since client credentials only returned an access token, and <strong>no refresh token</strong>.

Side Note - While searching for a solution I came across this interesting blog post describing <a href="http://www.silver-it.com/node/203">how to create secret keys with extended expiry dates</a>.
<h2>Second Method - User Credentials - Refresh Token Available</h2>
After some digging around, I found the <a href="https://github.com/Azure-Samples/active-directory-dotnet-native-headless">native headless sample</a> which demonstrates how to obtain an access token and a refresh token with a user's credentials in a non interactive way for a native client.

This was great.  Using a saved username and password, I could obtain a refresh token and access token from Azure AD by passing a UserCredentials object to the AcquireToken method in my C# code.

<code>
var userCredential = new UserCredential(clientUser, clientPassword);
var authenticationResult = authenticationContext.AcquireToken(apiResourceId, clientId,userCredential);</code>

&nbsp;

In the above code example, the authenticationResult will contain both AccessToken and RefreshToken.

By sending these tokens to my SPA I could now generate new access tokens using the refresh token from the Azure AD token endpoint:

<code>
$.ajax({
url: 'https://login.microsoftonline.com/contoso.onmicrosoft.com/oauth2/token',
type: 'POST',
contentType: 'application/x-www-form-urlencoded',
data: $.param({
grant_type: 'refresh_token',
resource: 'https://contoso.onmicrosoft.com/contosoapi',
refresh_token: '{refresh-token-value}'
}),
success: function(tokenResponse) {
...
},
error: function(tokenResponse) {
...
}});</code>

&nbsp;

During the development process, I realised that it would be handy if I could perform the same AcquireToken method from my javascript code.  In practice it would be wrong for the SPA to store the credentials, however during development it would allow me to not rely on my C# Application to generate a refresh token.

By using fiddler to intercept the call to Azure AD I found that I could call the token endpoint as and specify 'password' as the grant_type as follows.
<strong>Note - I could not find any documentation about this feature</strong>
<code>
$.ajax({
url: 'https://login.microsoftonline.com/contoso.onmicrosoft.com/oauth2/token',
type: 'POST',
contentType: 'application/x-www-form-urlencoded',
data: $.param({
<strong>grant_type: 'password',</strong>
resource: 'https://contoso.onmicrosoft.com/contosoapi',
client_id: '{client-id-guid e.g 3c4d7df1-79ab-4853-b75d-0136aca5ce55}',
<strong>username: 'contosouser@contoso.onmicrosoft.com',</strong>
<strong> password: '{password-value}'</strong>
}),
success: function(tokenResponse) {
...
},error: function(tokenResponse) {
...
}});</code>
<h2>Conclusion</h2>
This method does not provide any real security to the API since anyone with access to the SPA will obtain a refresh token that they can use to access it.

What it does provide is a way of providing authorization to a Client for a fixed period of time to access a Service through the use of OAuth2 access tokens and Azure AD without providing the Client with a Static Key or Secret.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>75</wp:post_id>
  <wp:post_date>2016-02-12 14:19:19</wp:post_date>
  <wp:post_date_gmt>2016-02-12 14:19:19</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>azure-ad-user-credentials-and-refresh-tokens</wp:post_name>
  <wp:status>private</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_oembed_2eda3e2fd5d7241c77b833bdca63753a</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[69155459]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_8182541</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[19733566896]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:8182541;s:53:"https://twitter.com/miczdem/status/698149412640391168";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_8179149</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_8182541</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[miczdem]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>13</wp:comment_id>
    <wp:comment_author><![CDATA[Vittorio]]></wp:comment_author>
    <wp:comment_author_email>Vittorib@microsoft.com</wp:comment_author_email>
    <wp:comment_author_url>http://Www.cloudidentity.com</wp:comment_author_url>
    <wp:comment_author_IP>73.169.211.13</wp:comment_author_IP>
    <wp:comment_date>2016-02-12 16:22:29</wp:comment_date>
    <wp:comment_date_gmt>2016-02-12 16:22:29</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I recommend NOT doing this. SPAs can renew tokens via hidden iframes and cookies, they don't need refresh tokens and giving them to a JS app is a huge liability. Take a look at how ADAL JS renews tokens: no need for refresh tokens whatsoever.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value>1455318764</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1455318764</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1455299387.3757989406585693359375;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1455294150.3493831157684326171875;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1455318765.1065409183502197265625;s:5:"event";s:15:"status-approved";s:4:"user";s:7:"miczdem";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>14</wp:comment_id>
    <wp:comment_author><![CDATA[miczdem]]></wp:comment_author>
    <wp:comment_author_email>miczdem@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://miczdem.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>220.101.80.170</wp:comment_author_IP>
    <wp:comment_date>2016-02-15 01:48:57</wp:comment_date>
    <wp:comment_date_gmt>2016-02-15 01:48:57</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Vittorio, thanks for your comment.  I would like to say a big thanks for  all your community work and blog posts, I really appreciate your feedback.

I did look into using ADAL JS and don't think I can use it in this scenario, but maybe I am missing something.  I ran the sample <a href="https://github.com/Azure-Samples/active-directory-angularjs-singlepageapp" rel="nofollow">azure ad spa sample</a> and can see, ADAL JS redirect the browser to a login page where a user can log in and then manages the access tokens and refreshing of tokens.

In my scenario, I do not want the end user to log in.  I want a Client Credentials scenario as described <a href="https://msdn.microsoft.com/en-us/library/azure/dn645543.aspxentials" rel="nofollow">here</a> where the SPA can request an access token from the token endpoint in order to make calls to the API.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>13</wp:comment_parent>
    <wp:comment_user_id>69155459</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1455500938</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1455500938.872208118438720703125;s:5:"event";s:9:"check-ham";s:4:"user";s:7:"miczdem";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value>1455500939</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Posting pictures from Google Photos to Facebook using a Windows Laptop</title>
  <link>https://micdemarco.wordpress.com/2016/09/22/posting-pictures-from-google-photos-to-facebook-from-a-windows-laptop/</link>
  <pubDate>Thu, 22 Sep 2016 02:50:15 +0000</pubDate>
  <dc:creator>micdemarco</dc:creator>
  <guid isPermaLink="false">https://micdemarco.wordpress.com/?p=219</guid>
  <description/>
  <content:encoded><![CDATA[As a Google Photos and Facebook user, it has always bothered me how difficult it is to share pictures from one app to the other from a Laptop.

Doing it from a phone is relatively easy.  You open the Google Photos app, select pictures and share them to Facebook.

Doing the same thing from a laptop is a bit more difficult.

Previously I used Picasa, and used to export and upload my pictures using a plugin (it was not the best user experience).  After Picasa was discontinued, I stopped using it and switched to just using Google Photos from the browser, and the Google Photos Uploader to upload new stuff.  However, I still wanted to have a local copy of my pictures.  Also sharing anything to Facebook from the laptop remained a pain, and performing all the edits in the browser was still no as good as a native app, so I needed a better setup.

I decided to write this blog post after reading the answers to <a href="https://productforums.google.com/forum/#!topic/photos/p9aK7m4sMyM" target="_blank">this question</a> and share my current setup, which I am quite happy with.
<h2>The Steps</h2>
The following steps will show you how to set up Google Drive to sync Google Photos to disk and how to setup Windows Photos for managing Google Photos and sharing photos to other Windows Store apps such as the Facebook app.
<div>

1) Set up Google Drive to Sync your pictures to Windows

<img class="alignnone size-full wp-image-238" src="https://micdemarco.files.wordpress.com/2016/09/2016-09-22_11-44-45.png" alt="2016-09-22_11-44-45" width="980" height="555" />

2) Install Google Drive and either sync everything  or add the Google Photos folder to the list of synced folders.Note: the first time you do this, you will download your entire pictures library to disk

3) Open the Windows Photos store app

<img class="alignnone size-full wp-image-249" src="https://micdemarco.files.wordpress.com/2016/09/2016-09-22_11-55-21.png" alt="2016-09-22_11-55-21" width="390" height="162" />
4) Go to settings and add the your Google Photos folder to the sources

<img class="alignnone size-full wp-image-255" src="https://micdemarco.files.wordpress.com/2016/09/2016-09-22_11-57-17.png" alt="2016-09-22_11-57-17" width="832" height="652" />

<strong>Update 05/11/16</strong>

In order for Photos app to be able to read the photos, you will need to set permissions to your Google Drive folder as described in <a href="http://superuser.com/questions/485719/windows-7-index-search-does-not-work-in-google-drive-folder">this article</a>.

<img class="alignnone size-full wp-image-366" src="https://micdemarco.files.wordpress.com/2016/09/2016-11-05_11-42-11.png" alt="2016-11-05_11-42-11" width="363" height="481" />

You should now see all your photos in the Photos app

You can edit your photos locally using Windows Photos app (or any other app) and these changes will be synced back to <strong>Google Drive</strong>, however they will <strong>not</strong> be synced back to <strong>Google Photos</strong>.

5) Open the Windows Store and install the Facebook app.  Launch, Login etc...

<img class="alignnone size-full wp-image-275" src="https://micdemarco.files.wordpress.com/2016/09/2016-09-22_12-09-50.png" alt="2016-09-22_12-09-50" width="582" height="373" />

6) Go back to the Photos app

7) Find the pictures that you want to share.  Select the pictures, click share and choose Facebook from the list of apps

<img class="alignnone size-full wp-image-281" src="https://micdemarco.files.wordpress.com/2016/09/2016-09-22_12-17-03.png" alt="2016-09-22_12-17-03.png" width="1357" height="732" />

8) The Facebook app takes over and you can post you pictures like you would do from a phone

<img class="alignnone size-full wp-image-293" src="https://micdemarco.files.wordpress.com/2016/09/2016-09-22_12-21-141.png" alt="2016-09-22_12-21-14.png" width="481" height="544" />

9) Done!

</div>
<h2>Conclusion</h2>
<div>
<div>You can use a Windows Pictures and Google Drive to access your Google Photos library locally and also share pictures to other Windows store apps such as Facebook in the same way as you would on a Tablet or Phone.</div>
<div></div>
<div>Unfortunately 2 way sync is fully supported, so any changes made locally to the photos will only be backed to Google Drive and not to Google Photos.</div>
</div>
<div></div>
<div>

I could not find a Google Photos app in the Windows App Store (come on Google...?).  That would make everything a lot easier.   There is an app called "Client for Google Photos Free" but it would only share links, and they also have a paid version which I did not try.

</div>
<div></div>
<div></div>
<div>For people coming from Picasa,  I think this is a good alternative to using Google Photos from the browser.</div>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>219</wp:post_id>
  <wp:post_date>2016-09-22 02:50:15</wp:post_date>
  <wp:post_date_gmt>2016-09-22 02:50:15</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>posting-pictures-from-google-photos-to-facebook-from-a-windows-laptop</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="facebook"><![CDATA[Facebook]]></category>
  <category domain="post_tag" nicename="google-photos"><![CDATA[Google Photos]]></category>
  <category domain="post_tag" nicename="picasa"><![CDATA[Picasa]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <category domain="post_tag" nicename="windows"><![CDATA[Windows]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:8182541;s:53:"https://twitter.com/miczdem/status/778788498337697792";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[27077919959]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_8179149</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_8182541</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[miczdem]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[69155459]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_8182541</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>22</wp:comment_id>
    <wp:comment_author><![CDATA[Keith Binding]]></wp:comment_author>
    <wp:comment_author_email>keith.binding@spirit-consulting.co.uk</wp:comment_author_email>
    <wp:comment_author_url>https://www.facebook.com/app_scoped_user_id/10155435326038079/</wp:comment_author_url>
    <wp:comment_author_IP>86.154.112.16</wp:comment_author_IP>
    <wp:comment_date>2016-10-08 11:01:58</wp:comment_date>
    <wp:comment_date_gmt>2016-10-08 11:01:58</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Thanks Mic, a very helpful article, much appreciated. Keith]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1475924520.47994709014892578125;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_post_as</wp:meta_key>
      <wp:meta_value>facebook</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_avatar</wp:meta_key>
      <wp:meta_value/>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_foreign_user_id</wp:meta_key>
      <wp:meta_value>10155435326038079</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value>1475925369</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1475925369</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1475925370.4644730091094970703125;s:5:"event";s:15:"status-approved";s:4:"user";s:10:"micdemarco";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>23</wp:comment_id>
    <wp:comment_author><![CDATA[micdemarco]]></wp:comment_author>
    <wp:comment_author_email>miczdem@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://micdemarco.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>1.132.96.204</wp:comment_author_IP>
    <wp:comment_date>2016-10-10 01:32:58</wp:comment_date>
    <wp:comment_date_gmt>2016-10-10 01:32:58</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[cheers for your comment Keith, glad you found it useful!]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>22</wp:comment_parent>
    <wp:comment_user_id>69155459</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value>1476063180</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1476063179</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1476063179.759418010711669921875;s:5:"event";s:9:"check-ham";s:4:"user";s:10:"micdemarco";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>2016-09-22_11-44-45</title>
  <link>https://micdemarco.wordpress.com/2016/09/22/posting-pictures-from-google-photos-to-facebook-from-a-windows-laptop/2016-09-22_11-44-45/#main</link>
  <pubDate>Thu, 22 Sep 2016 01:51:28 +0000</pubDate>
  <dc:creator>micdemarco</dc:creator>
  <guid isPermaLink="false">http://micdemarco.files.wordpress.com/2016/09/2016-09-22_11-44-45.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>238</wp:post_id>
  <wp:post_date>2016-09-22 01:51:28</wp:post_date>
  <wp:post_date_gmt>2016-09-22 01:51:28</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>2016-09-22_11-44-45</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>219</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://micdemarco.files.wordpress.com/2016/09/2016-09-22_11-44-45.png</wp:attachment_url>
</item>
<item>
  <title>2016-09-22_11-55-21</title>
  <link>https://micdemarco.wordpress.com/2016/09/22/posting-pictures-from-google-photos-to-facebook-from-a-windows-laptop/2016-09-22_11-55-21/#main</link>
  <pubDate>Thu, 22 Sep 2016 01:56:10 +0000</pubDate>
  <dc:creator>micdemarco</dc:creator>
  <guid isPermaLink="false">http://micdemarco.files.wordpress.com/2016/09/2016-09-22_11-55-21.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>249</wp:post_id>
  <wp:post_date>2016-09-22 01:56:10</wp:post_date>
  <wp:post_date_gmt>2016-09-22 01:56:10</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>2016-09-22_11-55-21</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>219</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://micdemarco.files.wordpress.com/2016/09/2016-09-22_11-55-21.png</wp:attachment_url>
</item>
<item>
  <title>2016-09-22_11-57-17</title>
  <link>https://micdemarco.wordpress.com/2016/09/22/posting-pictures-from-google-photos-to-facebook-from-a-windows-laptop/2016-09-22_11-57-17/#main</link>
  <pubDate>Thu, 22 Sep 2016 01:58:42 +0000</pubDate>
  <dc:creator>micdemarco</dc:creator>
  <guid isPermaLink="false">http://micdemarco.files.wordpress.com/2016/09/2016-09-22_11-57-17.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>255</wp:post_id>
  <wp:post_date>2016-09-22 01:58:42</wp:post_date>
  <wp:post_date_gmt>2016-09-22 01:58:42</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>2016-09-22_11-57-17</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>219</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://micdemarco.files.wordpress.com/2016/09/2016-09-22_11-57-17.png</wp:attachment_url>
</item>
<item>
  <title>2016-09-22_12-05-11</title>
  <link>https://micdemarco.wordpress.com/2016/09/22/posting-pictures-from-google-photos-to-facebook-from-a-windows-laptop/2016-09-22_12-05-11/#main</link>
  <pubDate>Thu, 22 Sep 2016 02:06:32 +0000</pubDate>
  <dc:creator>micdemarco</dc:creator>
  <guid isPermaLink="false">http://micdemarco.files.wordpress.com/2016/09/2016-09-22_12-05-11.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>265</wp:post_id>
  <wp:post_date>2016-09-22 02:06:32</wp:post_date>
  <wp:post_date_gmt>2016-09-22 02:06:32</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>2016-09-22_12-05-11</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>219</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://micdemarco.files.wordpress.com/2016/09/2016-09-22_12-05-11.png</wp:attachment_url>
</item>
<item>
  <title>2016-09-22_12-05-11</title>
  <link>https://micdemarco.wordpress.com/2016/09/22/posting-pictures-from-google-photos-to-facebook-from-a-windows-laptop/2016-09-22_12-05-11-2/#main</link>
  <pubDate>Thu, 22 Sep 2016 02:08:06 +0000</pubDate>
  <dc:creator>micdemarco</dc:creator>
  <guid isPermaLink="false">http://micdemarco.files.wordpress.com/2016/09/2016-09-22_12-05-111.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>268</wp:post_id>
  <wp:post_date>2016-09-22 02:08:06</wp:post_date>
  <wp:post_date_gmt>2016-09-22 02:08:06</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>2016-09-22_12-05-11-2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>219</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://micdemarco.files.wordpress.com/2016/09/2016-09-22_12-05-111.png</wp:attachment_url>
</item>
<item>
  <title>2016-09-22_12-09-50</title>
  <link>https://micdemarco.wordpress.com/2016/09/22/posting-pictures-from-google-photos-to-facebook-from-a-windows-laptop/2016-09-22_12-09-50/#main</link>
  <pubDate>Thu, 22 Sep 2016 02:11:02 +0000</pubDate>
  <dc:creator>micdemarco</dc:creator>
  <guid isPermaLink="false">http://micdemarco.files.wordpress.com/2016/09/2016-09-22_12-09-50.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>275</wp:post_id>
  <wp:post_date>2016-09-22 02:11:02</wp:post_date>
  <wp:post_date_gmt>2016-09-22 02:11:02</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>2016-09-22_12-09-50</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>219</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://micdemarco.files.wordpress.com/2016/09/2016-09-22_12-09-50.png</wp:attachment_url>
</item>
<item>
  <title>2016-09-22_12-17-03</title>
  <link>https://micdemarco.wordpress.com/2016/09/22/posting-pictures-from-google-photos-to-facebook-from-a-windows-laptop/2016-09-22_12-17-03/#main</link>
  <pubDate>Thu, 22 Sep 2016 02:19:51 +0000</pubDate>
  <dc:creator>micdemarco</dc:creator>
  <guid isPermaLink="false">http://micdemarco.files.wordpress.com/2016/09/2016-09-22_12-17-03.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>281</wp:post_id>
  <wp:post_date>2016-09-22 02:19:51</wp:post_date>
  <wp:post_date_gmt>2016-09-22 02:19:51</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>2016-09-22_12-17-03</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>219</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://micdemarco.files.wordpress.com/2016/09/2016-09-22_12-17-03.png</wp:attachment_url>
</item>
<item>
  <title>2016-09-22_12-21-14</title>
  <link>https://micdemarco.wordpress.com/2016/09/22/posting-pictures-from-google-photos-to-facebook-from-a-windows-laptop/2016-09-22_12-21-14/#main</link>
  <pubDate>Thu, 22 Sep 2016 02:23:53 +0000</pubDate>
  <dc:creator>micdemarco</dc:creator>
  <guid isPermaLink="false">http://micdemarco.files.wordpress.com/2016/09/2016-09-22_12-21-14.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>289</wp:post_id>
  <wp:post_date>2016-09-22 02:23:53</wp:post_date>
  <wp:post_date_gmt>2016-09-22 02:23:53</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>2016-09-22_12-21-14</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>219</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://micdemarco.files.wordpress.com/2016/09/2016-09-22_12-21-14.png</wp:attachment_url>
</item>
<item>
  <title>2016-09-22_12-21-14</title>
  <link>https://micdemarco.wordpress.com/2016/09/22/posting-pictures-from-google-photos-to-facebook-from-a-windows-laptop/2016-09-22_12-21-14-2/#main</link>
  <pubDate>Thu, 22 Sep 2016 02:25:09 +0000</pubDate>
  <dc:creator>micdemarco</dc:creator>
  <guid isPermaLink="false">http://micdemarco.files.wordpress.com/2016/09/2016-09-22_12-21-141.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>293</wp:post_id>
  <wp:post_date>2016-09-22 02:25:09</wp:post_date>
  <wp:post_date_gmt>2016-09-22 02:25:09</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>2016-09-22_12-21-14-2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>219</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://micdemarco.files.wordpress.com/2016/09/2016-09-22_12-21-141.png</wp:attachment_url>
</item>
<item>
  <title>2016-11-05_11-42-11</title>
  <link>https://micdemarco.wordpress.com/2016/09/22/posting-pictures-from-google-photos-to-facebook-from-a-windows-laptop/2016-11-05_11-42-11/#main</link>
  <pubDate>Sat, 05 Nov 2016 01:44:15 +0000</pubDate>
  <dc:creator>micdemarco</dc:creator>
  <guid isPermaLink="false">http://micdemarco.files.wordpress.com/2016/09/2016-11-05_11-42-11.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>366</wp:post_id>
  <wp:post_date>2016-11-05 01:44:15</wp:post_date>
  <wp:post_date_gmt>2016-11-05 01:44:15</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>2016-11-05_11-42-11</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>219</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://micdemarco.files.wordpress.com/2016/09/2016-11-05_11-42-11.png</wp:attachment_url>
</item>
  </channel>
</rss>
